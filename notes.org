* Git Hooks
** General
   Provide nice ways to automate common behavior, and provide checks for different things, such as spelling errors or commit message format
   Samples are provided under under .git/hooks
   #+BEGIN_SRC sh
     ls .git/hooks
     # applypatch-msg.sample  post-commit.sample   post-update.sample     pre-commit.sample  pre-rebase.sample          update.sample
     # commit-msg.sample      post-receive.sample  pre-applypatch.sample  pre-push.sample    prepare-commit-msg.sample
   #+END_SRC
*** Examples
**** pre-commit  - Spelling of Error, Warning, and Info Messages
     Need a command line spelling tool example - in this case, we will use [[http://aspell.net/win32/][aspell]] with the compiled English dictionary.
     First, we need to know how to use aspell:
     #+BEGIN_SRC sh
       # Usage is pretty simple:
       echo 'This is a ttest'|asell -a
       # @(#) International Ispell Version 3.1.20 (but really Aspell 0.50.3)
       # *
       # *
       # *
       # & ttest 15 10: test, tset, testy, attest, doest, toast, retest, truest, treat, totes, teat, tests, rest, tester, yest
     #+END_SRC
     Second, we need some utility functions to extract the message text from newly modelled errors. Messages start like this:
     #+BEGIN_SRC xml
       <Ellipse:Error />
       <Ellipse:Warning />
       <Ellipse:Information />
       <!-- Example message -->
       <Ellipse:Error xmi:id="_ZtfQIX0vEeG48be0ECXZcg" message="The Todo List assignment operation failed." id="M8MWP.E0001" base_Class="_GLJD0M7FEeCFcPb5qLnBbQ"/>
     #+END_SRC
     So we want to write script to extract all relevant messages
     #+BEGIN_SRC sh
       sed -ne 's/^.*Ellipse:\(Error\|Info\|Warning\).*message="\([^"]*\)".*$/\2/p' el_model/UMLModel/Module-8MWP/003.Design/002.Service/001.Errors.efx |grep "Todo List as"
       # Output: The Todo List assignment operation failed.
     #+END_SRC
     Let's create a new dummy message for now in RSA:
     #+BEGIN_SRC diff
       diff --git a/el_model/UMLModel/Module-8MWP/003.Design/002.Service/001.Errors.efx b/el_model/UMLModel/Module-8MWP/003.Design/002.Service/001.Errors.efx
       index 412fe38c7..e46e04f 100644
       --- a/el_model/UMLModel/Module-8MWP/003.Design/002.Service/001.Errors.efx
       +++ b/el_model/UMLModel/Module-8MWP/003.Design/002.Service/001.Errors.efx
       @@ -701,6 +701,7 @@
            <packagedElement xmi:type="uml:Class" xmi:id="_pwihMA4-EeWhm5-L8zMVLQ" name="M8MWP_MSEWAB_E0005_GimmeMoreLines"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_qu3KoA4-EeWhm5-L8zMVLQ" name="M8MWP_MSEWAB_E0006_NoDurationDetailsForYou"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_KBzzsA5AEeWhm5-L8zMVLQ" name="M8MWP_MSEWAB_E0003_NoNumberOfLinesForYou"/>
       +    <packagedElement xmi:type="uml:Class" xmi:id="_63j7gBTsEeW7DMWdOojRWw" name="M8MWP_E6661_TestErr"/>
          </uml:Package>
          <Ellipse:Warning xmi:id="_ZtepE30vEeG48be0ECXZcg" message="This work order already has a Todo List assignment. Do you want to continue with this assignment?" id="M8MWP.W0001" base_Class="_Yk-Z4MfKEeCq3ImkQChUbQ"/>
          <Ellipse:Warning xmi:id="_ZtfQIH0vEeG48be0ECXZcg" message="This task already has a Todo List assignment. Do you want to continue with this assignment?" id="M8MWP.W0002" base_Class="_1W_zwMfKEeCq3ImkQChUbQ"/>
       @@ -1349,4 +1350,5 @@
          <Ellipse:Error xmi:id="_pwjIQA4-EeWhm5-L8zMVLQ" message="Number of Lines has to be greater than zero" parameters="" id="M8MWP.MSEWAB.E0005" base_Class="_pwihMA4-EeWhm5-L8zMVLQ"/>
          <Ellipse:Error xmi:id="_qu3xsA4-EeWhm5-L8zMVLQ" message="Can only enter details with Duration Attribute Type" id="M8MWP.MSEWAB.E0006" base_Class="_qu3KoA4-EeWhm5-L8zMVLQ"/>
          <Ellipse:Error xmi:id="_KB0awA5AEeWhm5-L8zMVLQ" message="Number of Lines cannot be entered for Attribute Type [{0}]" parameters="" id="M8MWP.MSEWAB.E0003" base_Class="_KBzzsA5AEeWhm5-L8zMVLQ"/>
       +  <Ellipse:Error xmi:id="_63nl4BTsEeW7DMWdOojRWw" message="The Todo List aszignment operation failed." id="M8MWP.E6661" base_Class="_63j7gBTsEeW7DMWdOojRWw"/>
        </xmi:XMI>
     #+END_SRC
     Now, we create a pre-commit hook to look for typos, and output a message if it fails validation:
     #+BEGIN_SRC sh
       #!/bin/sh

       RED='\033[0;31m'
       BLUE='\033[0;34m'
       GREEN='\033[0;32m'
       NC='\033[0m'
       OIFS=$IFS
       IFS=$'\n'
       vals=($(git diff --cached -- el_model/UMLModel/Module-8MWP/003.Design/002.Service/001.Errors.efx|sed -ne 's/^\+.*Ellipse:\(Error\|Info\|Warn\).* message="\([^"]*\)" id="\([^"]*\)".*$/\2\n\3/p'))
       IFS=$OIFS

       for i in $(seq 0 2 ${#vals[@]});
       do
           msg=${vals[${i}]}
           id=${vals[$((${i} + 1))]}
           errors=$(echo ${msg} | aspell -a | grep -c ^\&)
           if [ ${errors} -gt 0 ] ; then
               printf "There are [${errors}] typos in [${RED}${id}${NC}] - {${GREEN}${msg}${NC}}"
               exit 1
           fi
       done  
     #+END_SRC
     Example output:
     [[file:sample.png]]
**** pre-commit  - Ignored Tests
**** commit-msg  - Ensuring correct message format
**** post-commit - Emailing QA upon defect completion 
**** post-commit - Update version one
** Resources
   Just googling for 'Commit Hooks' brings back most of the resources you could need.
   - [[http://git-scm.com/docs/githooks][Git SCM on Git Hooks]]
   - [[https://www.atlassian.com/git/tutorials/git-hooks/conceptual-overview][Atlassian Tutorial]]
   - [[http://githooks.com/][Page with a full list of hooks and some info]]
   - [[http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks][Information on customising Git Hooks]]
* [[https://marketplace.eclipse.org/content/findbugs-eclipse-plugin][Find Bugs]]
** General
   Used to find common coding errors; to increase the general code base quality.
   - General → Appearance → Label Decorations
     [[file:decorators.png]]
   - Window → Show View → Other
     [[file:findbugs-view.png]]
     Right Click → Find Bugs → Find Bugs
     [[file:findbugs-cmd.png]]
** Resources
   - [[https://www.wikiwand.com/en/Static_program_analysis][Static Code Analysis (Wiki)]]
*** Similar Plugins
    - [[https://marketplace.eclipse.org/content/checkstyle-plug][Checkstyle]] - Guaranteed to generate some debate :).
    - [[https://marketplace.eclipse.org/content/eclipse-code-recommenders][Code Recommenders]] - Not directly relevant, but incredibly awesome.
    - [[https://marketplace.eclipse.org/content/unnecessary-code-detector][Unnecessary Code Detector]]
    - [[https://marketplace.eclipse.org/content/bytecode-visualizer][Bytecode Visualiser]] - Cool, but arguably irrelevant
